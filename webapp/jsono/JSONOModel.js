sap.ui.define(["sap/ui/model/json/JSONModel"], function (JSONModel) {
  class JSONOModel extends JSONModel {
    proxies = new WeakMap();

    constructor(dataObject, options = {
      callOnAnyGet: false,
      callOnAnySet: false
    }) {
      super();
      this._options = options;
      const proxiedDataObject = this.makeProxyFor(dataObject);
      this.setData(proxiedDataObject);
    }

    makeProxyFor(dataObject) {
      const self = this;
      const interceptor = {
        get(target, propertyKey, receiver) {
          if (!(target[propertyKey] instanceof Set) && !(target[propertyKey] instanceof Map) && typeof target[propertyKey] === "object" && target[propertyKey] !== null) {
            let proxy;

            if (self.proxies.has(target[propertyKey])) {
              proxy = self.proxies.get(target[propertyKey]);
            } else {
              proxy = new Proxy(target[propertyKey], interceptor);
              self.proxies.set(target[propertyKey], proxy);
            }

            return proxy;
          } else if (typeof target[propertyKey] !== "undefined") {
            if (self._options.callOnAnyGet === true && typeof dataObject.onAnyGet === "function") {
              dataObject.onAnyGet(propertyKey);
            }

            return Reflect.get(target, propertyKey, receiver);
          }
        },

        set(target, propertyKey, value, receiver) {
          const result = Reflect.set(target, propertyKey, value, receiver);

          if (self._options.callOnAnySet === true && typeof dataObject.onAnySet === "function") {
            dataObject.onAnySet(propertyKey);
          }

          self.checkUpdate();
          return result;
        }

      };
      return new Proxy(dataObject, interceptor);
    }

  }

  var __exports = {
    __esModule: true
  };
  __exports.JSONOModel = JSONOModel;
  return __exports;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qc29uby9KU09OT01vZGVsLnRzIl0sIm5hbWVzIjpbIkpTT05PTW9kZWwiLCJKU09OTW9kZWwiLCJwcm94aWVzIiwiV2Vha01hcCIsImNvbnN0cnVjdG9yIiwiZGF0YU9iamVjdCIsIm9wdGlvbnMiLCJjYWxsT25BbnlHZXQiLCJjYWxsT25BbnlTZXQiLCJfb3B0aW9ucyIsInByb3hpZWREYXRhT2JqZWN0IiwibWFrZVByb3h5Rm9yIiwic2V0RGF0YSIsInNlbGYiLCJpbnRlcmNlcHRvciIsImdldCIsInRhcmdldCIsInByb3BlcnR5S2V5IiwicmVjZWl2ZXIiLCJTZXQiLCJNYXAiLCJwcm94eSIsImhhcyIsIlByb3h5Iiwic2V0Iiwib25BbnlHZXQiLCJSZWZsZWN0IiwidmFsdWUiLCJyZXN1bHQiLCJvbkFueVNldCIsImNoZWNrVXBkYXRlIl0sIm1hcHBpbmdzIjoiO0FBVU8sUUFBTUEsVUFBTixTQUF5QkMsU0FBekIsQ0FBbUM7QUFHaENDLElBQUFBLE9BQU8sR0FBRyxJQUFJQyxPQUFKLEVBQUg7O0FBRWZDLElBQUFBLFdBQVcsQ0FDVEMsVUFEUyxFQUVUQyxPQUFnQixHQUFHO0FBQ2pCQyxNQUFBQSxZQUFZLEVBQUUsS0FERztBQUVqQkMsTUFBQUEsWUFBWSxFQUFFO0FBRkcsS0FGVixFQU1UO0FBQ0E7QUFDQSxXQUFLQyxRQUFMLEdBQWdCSCxPQUFoQjtBQUNBLFlBQU1JLGlCQUFpQixHQUFHLEtBQUtDLFlBQUwsQ0FBa0JOLFVBQWxCLENBQTFCO0FBQ0EsV0FBS08sT0FBTCxDQUFhRixpQkFBYjtBQUNEOztBQUVPQyxJQUFBQSxZQUFZLENBQUNOLFVBQUQsRUFBZ0M7QUFDbEQsWUFBTVEsSUFBSSxHQUFHLElBQWI7QUFFQSxZQUFNQyxXQUFXLEdBQUc7QUFDbEJDLFFBQUFBLEdBQUcsQ0FBQ0MsTUFBRCxFQUFjQyxXQUFkLEVBQW1DQyxRQUFuQyxFQUF1RDtBQUN4RCxjQUNFLEVBQUVGLE1BQU0sQ0FBQ0MsV0FBRCxDQUFOLFlBQStCRSxHQUFqQyxLQUNBLEVBQUVILE1BQU0sQ0FBQ0MsV0FBRCxDQUFOLFlBQStCRyxHQUFqQyxDQURBLElBRUEsT0FBT0osTUFBTSxDQUFDQyxXQUFELENBQWIsS0FBK0IsUUFGL0IsSUFHQUQsTUFBTSxDQUFDQyxXQUFELENBQU4sS0FBd0IsSUFKMUIsRUFLRTtBQUNBLGdCQUFJSSxLQUFKOztBQUVBLGdCQUFJUixJQUFJLENBQUNYLE9BQUwsQ0FBYW9CLEdBQWIsQ0FBaUJOLE1BQU0sQ0FBQ0MsV0FBRCxDQUF2QixDQUFKLEVBQTJDO0FBQ3pDSSxjQUFBQSxLQUFLLEdBQUdSLElBQUksQ0FBQ1gsT0FBTCxDQUFhYSxHQUFiLENBQWlCQyxNQUFNLENBQUNDLFdBQUQsQ0FBdkIsQ0FBUjtBQUNELGFBRkQsTUFFTztBQUNMSSxjQUFBQSxLQUFLLEdBQUcsSUFBSUUsS0FBSixDQUFVUCxNQUFNLENBQUNDLFdBQUQsQ0FBaEIsRUFBK0JILFdBQS9CLENBQVI7QUFDQUQsY0FBQUEsSUFBSSxDQUFDWCxPQUFMLENBQWFzQixHQUFiLENBQWlCUixNQUFNLENBQUNDLFdBQUQsQ0FBdkIsRUFBc0NJLEtBQXRDO0FBQ0Q7O0FBRUQsbUJBQU9BLEtBQVA7QUFDRCxXQWhCRCxNQWdCTyxJQUFJLE9BQU9MLE1BQU0sQ0FBQ0MsV0FBRCxDQUFiLEtBQStCLFdBQW5DLEVBQWdEO0FBQ3JELGdCQUNFSixJQUFJLENBQUNKLFFBQUwsQ0FBY0YsWUFBZCxLQUErQixJQUEvQixJQUNBLE9BQU9GLFVBQVUsQ0FBQ29CLFFBQWxCLEtBQStCLFVBRmpDLEVBR0U7QUFDQXBCLGNBQUFBLFVBQVUsQ0FBQ29CLFFBQVgsQ0FBb0JSLFdBQXBCO0FBQ0Q7O0FBRUQsbUJBQU9TLE9BQU8sQ0FBQ1gsR0FBUixDQUFZQyxNQUFaLEVBQW9CQyxXQUFwQixFQUFpQ0MsUUFBakMsQ0FBUDtBQUNEO0FBQ0YsU0E1QmlCOztBQThCbEJNLFFBQUFBLEdBQUcsQ0FBQ1IsTUFBRCxFQUFjQyxXQUFkLEVBQW1DVSxLQUFuQyxFQUErQ1QsUUFBL0MsRUFBbUU7QUFDcEUsZ0JBQU1VLE1BQU0sR0FBR0YsT0FBTyxDQUFDRixHQUFSLENBQVlSLE1BQVosRUFBb0JDLFdBQXBCLEVBQWlDVSxLQUFqQyxFQUF3Q1QsUUFBeEMsQ0FBZjs7QUFFQSxjQUNFTCxJQUFJLENBQUNKLFFBQUwsQ0FBY0QsWUFBZCxLQUErQixJQUEvQixJQUNBLE9BQU9ILFVBQVUsQ0FBQ3dCLFFBQWxCLEtBQStCLFVBRmpDLEVBR0U7QUFDQXhCLFlBQUFBLFVBQVUsQ0FBQ3dCLFFBQVgsQ0FBb0JaLFdBQXBCO0FBQ0Q7O0FBRURKLFVBQUFBLElBQUksQ0FBQ2lCLFdBQUw7QUFDQSxpQkFBT0YsTUFBUDtBQUNEOztBQTFDaUIsT0FBcEI7QUE2Q0EsYUFBTyxJQUFJTCxLQUFKLENBQVVsQixVQUFWLEVBQXNCUyxXQUF0QixDQUFQO0FBQ0Q7O0FBbkV1QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXHJcbmltcG9ydCBKU09OTW9kZWwgZnJvbSBcInNhcC91aS9tb2RlbC9qc29uL0pTT05Nb2RlbFwiO1xyXG5cclxuaW50ZXJmYWNlIG9wdGlvbnMge1xyXG4gIC8vIGNhbGwgb25BbnlHZXQgbWV0aG9kPyBNdXN0IGJlIGRlZmluZWQgaW4gdGhlIGRhdGFPYmplY3QgcGFzc2VkIHRvIHRoZSBKU09OT01vZGVsXHJcbiAgY2FsbE9uQW55R2V0PzogYm9vbGVhbjtcclxuICAvLyBjYWxsIG9uQW55U2V0IG1ldGhvZD9cclxuICBjYWxsT25BbnlTZXQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSlNPTk9Nb2RlbCBleHRlbmRzIEpTT05Nb2RlbCB7XHJcbiAgW3g6IHN0cmluZ106IGFueTtcclxuICBwcml2YXRlIF9vcHRpb25zOiBvcHRpb25zO1xyXG4gIHByaXZhdGUgcHJveGllcyA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgZGF0YU9iamVjdDogYW55LFxyXG4gICAgb3B0aW9uczogb3B0aW9ucyA9IHtcclxuICAgICAgY2FsbE9uQW55R2V0OiBmYWxzZSxcclxuICAgICAgY2FsbE9uQW55U2V0OiBmYWxzZSxcclxuICAgIH1cclxuICApIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcclxuICAgIGNvbnN0IHByb3hpZWREYXRhT2JqZWN0ID0gdGhpcy5tYWtlUHJveHlGb3IoZGF0YU9iamVjdCk7XHJcbiAgICB0aGlzLnNldERhdGEocHJveGllZERhdGFPYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBtYWtlUHJveHlGb3IoZGF0YU9iamVjdDogYW55KTogdHlwZW9mIFByb3h5IHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGNvbnN0IGludGVyY2VwdG9yID0ge1xyXG4gICAgICBnZXQodGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcsIHJlY2VpdmVyOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICEodGFyZ2V0W3Byb3BlcnR5S2V5XSBpbnN0YW5jZW9mIFNldCkgJiZcclxuICAgICAgICAgICEodGFyZ2V0W3Byb3BlcnR5S2V5XSBpbnN0YW5jZW9mIE1hcCkgJiZcclxuICAgICAgICAgIHR5cGVvZiB0YXJnZXRbcHJvcGVydHlLZXldID09PSBcIm9iamVjdFwiICYmXHJcbiAgICAgICAgICB0YXJnZXRbcHJvcGVydHlLZXldICE9PSBudWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBsZXQgcHJveHk7XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGYucHJveGllcy5oYXModGFyZ2V0W3Byb3BlcnR5S2V5XSkpIHtcclxuICAgICAgICAgICAgcHJveHkgPSBzZWxmLnByb3hpZXMuZ2V0KHRhcmdldFtwcm9wZXJ0eUtleV0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0W3Byb3BlcnR5S2V5XSwgaW50ZXJjZXB0b3IpO1xyXG4gICAgICAgICAgICBzZWxmLnByb3hpZXMuc2V0KHRhcmdldFtwcm9wZXJ0eUtleV0sIHByb3h5KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gcHJveHk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0W3Byb3BlcnR5S2V5XSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBzZWxmLl9vcHRpb25zLmNhbGxPbkFueUdldCA9PT0gdHJ1ZSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgZGF0YU9iamVjdC5vbkFueUdldCA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgZGF0YU9iamVjdC5vbkFueUdldChwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBzZXQodGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHJlY2VpdmVyOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIHZhbHVlLCByZWNlaXZlcik7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHNlbGYuX29wdGlvbnMuY2FsbE9uQW55U2V0ID09PSB0cnVlICYmXHJcbiAgICAgICAgICB0eXBlb2YgZGF0YU9iamVjdC5vbkFueVNldCA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBkYXRhT2JqZWN0Lm9uQW55U2V0KHByb3BlcnR5S2V5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuY2hlY2tVcGRhdGUoKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb3h5KGRhdGFPYmplY3QsIGludGVyY2VwdG9yKTtcclxuICB9XHJcbn1cclxuIl19