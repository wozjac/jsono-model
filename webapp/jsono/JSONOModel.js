sap.ui.define(["sap/ui/model/json/JSONModel"], function (JSONModel) {
  class JSONOModel extends JSONModel {
    constructor(dataObject, options = {
      callOnAnyGet: false,
      callOnAnySet: false
    }) {
      super();
      this._options = options;
      const proxiedDataObject = this.makeProxyFor(dataObject);
      this.setData(proxiedDataObject);
    }

    makeProxyFor(dataObject) {
      const self = this;
      const interceptor = {
        get(target, propertyKey, receiver) {
          if (!(target[propertyKey] instanceof Set) && !(target[propertyKey] instanceof Map) && typeof target[propertyKey] === "object" && target[propertyKey] !== null) {
            return new Proxy(target[propertyKey], interceptor);
          } else if (typeof target[propertyKey] !== "undefined") {
            if (self._options.callOnAnyGet === true && typeof dataObject.onAnyGet === "function") {
              dataObject.onAnyGet(propertyKey);
            }

            return Reflect.get(target, propertyKey, receiver);
          }
        },

        set(target, propertyKey, value, receiver) {
          const result = Reflect.set(target, propertyKey, value, receiver);

          if (self._options.callOnAnySet === true && typeof dataObject.onAnySet === "function") {
            dataObject.onAnySet(propertyKey);
          }

          self.checkUpdate();
          return result;
        }

      };
      return new Proxy(dataObject, interceptor);
    }

  }

  var __exports = {
    __esModule: true
  };
  __exports.JSONOModel = JSONOModel;
  return __exports;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qc29uby9KU09OT01vZGVsLnRzIl0sIm5hbWVzIjpbIkpTT05PTW9kZWwiLCJKU09OTW9kZWwiLCJjb25zdHJ1Y3RvciIsImRhdGFPYmplY3QiLCJvcHRpb25zIiwiY2FsbE9uQW55R2V0IiwiY2FsbE9uQW55U2V0IiwiX29wdGlvbnMiLCJwcm94aWVkRGF0YU9iamVjdCIsIm1ha2VQcm94eUZvciIsInNldERhdGEiLCJzZWxmIiwiaW50ZXJjZXB0b3IiLCJnZXQiLCJ0YXJnZXQiLCJwcm9wZXJ0eUtleSIsInJlY2VpdmVyIiwiU2V0IiwiTWFwIiwiUHJveHkiLCJvbkFueUdldCIsIlJlZmxlY3QiLCJzZXQiLCJ2YWx1ZSIsInJlc3VsdCIsIm9uQW55U2V0IiwiY2hlY2tVcGRhdGUiXSwibWFwcGluZ3MiOiI7QUFVTyxRQUFNQSxVQUFOLFNBQXlCQyxTQUF6QixDQUFtQztBQUl4Q0MsSUFBQUEsV0FBVyxDQUNUQyxVQURTLEVBRVRDLE9BQWdCLEdBQUc7QUFDakJDLE1BQUFBLFlBQVksRUFBRSxLQURHO0FBRWpCQyxNQUFBQSxZQUFZLEVBQUU7QUFGRyxLQUZWLEVBTVQ7QUFDQTtBQUNBLFdBQUtDLFFBQUwsR0FBZ0JILE9BQWhCO0FBQ0EsWUFBTUksaUJBQWlCLEdBQUcsS0FBS0MsWUFBTCxDQUFrQk4sVUFBbEIsQ0FBMUI7QUFDQSxXQUFLTyxPQUFMLENBQWFGLGlCQUFiO0FBQ0Q7O0FBRU9DLElBQUFBLFlBQVksQ0FBQ04sVUFBRCxFQUFnQztBQUNsRCxZQUFNUSxJQUFJLEdBQUcsSUFBYjtBQUVBLFlBQU1DLFdBQVcsR0FBRztBQUNsQkMsUUFBQUEsR0FBRyxDQUFDQyxNQUFELEVBQWNDLFdBQWQsRUFBbUNDLFFBQW5DLEVBQXVEO0FBQ3hELGNBQ0UsRUFBRUYsTUFBTSxDQUFDQyxXQUFELENBQU4sWUFBK0JFLEdBQWpDLEtBQ0EsRUFBRUgsTUFBTSxDQUFDQyxXQUFELENBQU4sWUFBK0JHLEdBQWpDLENBREEsSUFFQSxPQUFPSixNQUFNLENBQUNDLFdBQUQsQ0FBYixLQUErQixRQUYvQixJQUdBRCxNQUFNLENBQUNDLFdBQUQsQ0FBTixLQUF3QixJQUoxQixFQUtFO0FBQ0EsbUJBQU8sSUFBSUksS0FBSixDQUFVTCxNQUFNLENBQUNDLFdBQUQsQ0FBaEIsRUFBK0JILFdBQS9CLENBQVA7QUFDRCxXQVBELE1BT08sSUFBSSxPQUFPRSxNQUFNLENBQUNDLFdBQUQsQ0FBYixLQUErQixXQUFuQyxFQUFnRDtBQUNyRCxnQkFDRUosSUFBSSxDQUFDSixRQUFMLENBQWNGLFlBQWQsS0FBK0IsSUFBL0IsSUFDQSxPQUFPRixVQUFVLENBQUNpQixRQUFsQixLQUErQixVQUZqQyxFQUdFO0FBQ0FqQixjQUFBQSxVQUFVLENBQUNpQixRQUFYLENBQW9CTCxXQUFwQjtBQUNEOztBQUVELG1CQUFPTSxPQUFPLENBQUNSLEdBQVIsQ0FBWUMsTUFBWixFQUFvQkMsV0FBcEIsRUFBaUNDLFFBQWpDLENBQVA7QUFDRDtBQUNGLFNBbkJpQjs7QUFxQmxCTSxRQUFBQSxHQUFHLENBQUNSLE1BQUQsRUFBY0MsV0FBZCxFQUFtQ1EsS0FBbkMsRUFBK0NQLFFBQS9DLEVBQW1FO0FBQ3BFLGdCQUFNUSxNQUFNLEdBQUdILE9BQU8sQ0FBQ0MsR0FBUixDQUFZUixNQUFaLEVBQW9CQyxXQUFwQixFQUFpQ1EsS0FBakMsRUFBd0NQLFFBQXhDLENBQWY7O0FBRUEsY0FDRUwsSUFBSSxDQUFDSixRQUFMLENBQWNELFlBQWQsS0FBK0IsSUFBL0IsSUFDQSxPQUFPSCxVQUFVLENBQUNzQixRQUFsQixLQUErQixVQUZqQyxFQUdFO0FBQ0F0QixZQUFBQSxVQUFVLENBQUNzQixRQUFYLENBQW9CVixXQUFwQjtBQUNEOztBQUVESixVQUFBQSxJQUFJLENBQUNlLFdBQUw7QUFDQSxpQkFBT0YsTUFBUDtBQUNEOztBQWpDaUIsT0FBcEI7QUFvQ0EsYUFBTyxJQUFJTCxLQUFKLENBQVVoQixVQUFWLEVBQXNCUyxXQUF0QixDQUFQO0FBQ0Q7O0FBekR1QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXHJcbmltcG9ydCBKU09OTW9kZWwgZnJvbSBcInNhcC91aS9tb2RlbC9qc29uL0pTT05Nb2RlbFwiO1xyXG5cclxuaW50ZXJmYWNlIG9wdGlvbnMge1xyXG4gIC8vIGNhbGwgb25BbnlHZXQgbWV0aG9kPyBNdXN0IGJlIGRlZmluZWQgaW4gdGhlIGRhdGFPYmplY3QgcGFzc2VkIHRvIHRoZSBKU09OT01vZGVsXHJcbiAgY2FsbE9uQW55R2V0PzogYm9vbGVhbjtcclxuICAvLyBjYWxsIG9uQW55U2V0IG1ldGhvZD9cclxuICBjYWxsT25BbnlTZXQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSlNPTk9Nb2RlbCBleHRlbmRzIEpTT05Nb2RlbCB7XHJcbiAgW3g6IHN0cmluZ106IGFueTtcclxuICBwcml2YXRlIF9vcHRpb25zOiBvcHRpb25zO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRhdGFPYmplY3Q6IGFueSxcclxuICAgIG9wdGlvbnM6IG9wdGlvbnMgPSB7XHJcbiAgICAgIGNhbGxPbkFueUdldDogZmFsc2UsXHJcbiAgICAgIGNhbGxPbkFueVNldDogZmFsc2UsXHJcbiAgICB9XHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICBjb25zdCBwcm94aWVkRGF0YU9iamVjdCA9IHRoaXMubWFrZVByb3h5Rm9yKGRhdGFPYmplY3QpO1xyXG4gICAgdGhpcy5zZXREYXRhKHByb3hpZWREYXRhT2JqZWN0KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbWFrZVByb3h5Rm9yKGRhdGFPYmplY3Q6IGFueSk6IHR5cGVvZiBQcm94eSB7XHJcbiAgICBjb25zdCBzZWxmID0gdGhpcztcclxuXHJcbiAgICBjb25zdCBpbnRlcmNlcHRvciA9IHtcclxuICAgICAgZ2V0KHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCByZWNlaXZlcjogYW55KTogYW55IHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAhKHRhcmdldFtwcm9wZXJ0eUtleV0gaW5zdGFuY2VvZiBTZXQpICYmXHJcbiAgICAgICAgICAhKHRhcmdldFtwcm9wZXJ0eUtleV0gaW5zdGFuY2VvZiBNYXApICYmXHJcbiAgICAgICAgICB0eXBlb2YgdGFyZ2V0W3Byb3BlcnR5S2V5XSA9PT0gXCJvYmplY3RcIiAmJlxyXG4gICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5S2V5XSAhPT0gbnVsbFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXRbcHJvcGVydHlLZXldLCBpbnRlcmNlcHRvcik7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0W3Byb3BlcnR5S2V5XSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBzZWxmLl9vcHRpb25zLmNhbGxPbkFueUdldCA9PT0gdHJ1ZSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgZGF0YU9iamVjdC5vbkFueUdldCA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgZGF0YU9iamVjdC5vbkFueUdldChwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBzZXQodGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHJlY2VpdmVyOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIHZhbHVlLCByZWNlaXZlcik7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHNlbGYuX29wdGlvbnMuY2FsbE9uQW55U2V0ID09PSB0cnVlICYmXHJcbiAgICAgICAgICB0eXBlb2YgZGF0YU9iamVjdC5vbkFueVNldCA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBkYXRhT2JqZWN0Lm9uQW55U2V0KHByb3BlcnR5S2V5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuY2hlY2tVcGRhdGUoKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb3h5KGRhdGFPYmplY3QsIGludGVyY2VwdG9yKTtcclxuICB9XHJcbn1cclxuIl19