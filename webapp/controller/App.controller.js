sap.ui.define(["sap/ui/core/mvc/Controller", "sap/ui/model/json/JSONModel", "sap/m/MessageToast", "../jsono/JSONOModel", "../model/AppViewModel", "sap/m/MessageBox"], function (Controller, JSONModel, MessageToast, ___jsono_JSONOModel, ___model_AppViewModel, MessageBox) {
  const JSONOModel = ___jsono_JSONOModel["JSONOModel"];
  const AppViewModel = ___model_AppViewModel["AppViewModel"];

  /**
   * @namespace jwozniczak.io.jsonomodel.controller
   */
  const AppController = Controller.extend("jwozniczak.io.jsonomodel.controller.AppController", {
    constructor: function constructor() {
      Controller.prototype.constructor.apply(this, arguments);
      this.dataForStandardJSONModel = {
        name: "Bonifatzy",
        address: {
          street: "3 Piggys Aveanue"
        },
        favorites: [{
          label: "French Fries",
          category: "Food"
        }, {
          label: "Rubik Cube",
          category: "Hobby"
        }],
        description: {
          personality: "Nervous"
        }
      };
      this.dataForSimpleJSONOModel = {
        name: "Bonifatzy",
        address: {
          street: "3 Piggys Aveanue"
        },
        favorites: [{
          label: "French Fries",
          category: "Food"
        }, {
          label: "Rubik Cube",
          category: "Hobby"
        }],
        description: {
          personality: "Nervous"
        }
      };
    },
    onInit: function _onInit() {
      this.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass()); // STANDARD JSON MODEL

      const standardJSONModel = new JSONModel(this.dataForStandardJSONModel, true);
      this.getView().setModel(standardJSONModel, "standardJSON"); // JSONO Model (SIMPLE)

      const simpleJSONOModel = new JSONOModel(this.dataForSimpleJSONOModel);
      this.getView().setModel(simpleJSONOModel, "simpleJSONOModel"); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

      this.dataForSimpleJSONOModel = simpleJSONOModel.getData(); // JSONO Model from a separate file with property methods

      const separateJSONOModel = new JSONOModel(new AppViewModel(), {
        callOnAnyGet: false,
        callOnAnySet: true
      });
      this.getView().setModel(separateJSONOModel, "separateJSONOModel"); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

      this.appViewModel = separateJSONOModel.getData();
    },
    onPressUpdateNameForStandard: function _onPressUpdateNameForStandard() {
      this.dataForStandardJSONModel.name = this.dataForStandardJSONModel.name === "Fibonacci" ? "Bonifatzy" : "Fibonacci";
      MessageToast.show("It works");
    },
    onPressAddCityForStandard: function _onPressAddCityForStandard() {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      this.dataForStandardJSONModel.address.city = "Atlantis";
      MessageToast.show("A property was added to JSON data object (address.city), but it is not reflected in the UI field...");
    },
    onPressDisplayPersonalityForStandard: function _onPressDisplayPersonalityForStandard() {
      MessageToast.show(this.dataForStandardJSONModel.description.personality);
    },
    onPressUpdateArrayForStandard: function _onPressUpdateArrayForStandard() {
      this.dataForStandardJSONModel.favorites[0].label = this.dataForStandardJSONModel.favorites[0].label === "Strawberries" ? "French Fries" : "Strawberries";
      MessageToast.show("It works");
    },
    onPressAddToArrayForStandard: function _onPressAddToArrayForStandard() {
      this.dataForStandardJSONModel.favorites.push({
        label: "Pancakes",
        category: "Food"
      });
      MessageToast.show("'Pancakes' item was added to the data object array, but it is not reflected in the table");
    },
    onPressRemoveFromArrayForStandard: function _onPressRemoveFromArrayForStandard() {
      this.dataForStandardJSONModel.favorites.shift();
      MessageToast.show("The first item in the data object array was removed, strange things happen");
    },
    onPressUpdateNameForSimpleJSONO: function _onPressUpdateNameForSimpleJSONO() {
      this.dataForSimpleJSONOModel.name = this.dataForSimpleJSONOModel.name === "Fibonacci" ? "Bonifatzy" : "Fibonacci";
      MessageToast.show("It works");
    },
    onPressAddCityForSimpleJSONO: function _onPressAddCityForSimpleJSONO() {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      this.dataForSimpleJSONOModel.address.city = "Atlantis";
      MessageToast.show("A property was added to JSON data object (address.city), it is reflected in the UI field...");
    },
    onPressDisplayPersonalityForSimpleJSONO: function _onPressDisplayPersonalityForSimpleJSONO() {
      MessageToast.show(this.dataForSimpleJSONOModel.description.personality);
    },
    onPressUpdateArrayForSimpleJSONO: function _onPressUpdateArrayForSimpleJSONO() {
      this.dataForSimpleJSONOModel.favorites[0].label = this.dataForSimpleJSONOModel.favorites[0].label === "Strawberries" ? "French Fries" : "Strawberries";
      MessageToast.show("It works");
    },
    onPressAddToArrayForSimpleJSONO: function _onPressAddToArrayForSimpleJSONO() {
      this.dataForSimpleJSONOModel.favorites.push({
        label: "Pancakes",
        category: "Food"
      });
      MessageToast.show("'Pancakes' item was added to the data object array, it is reflected in the table");
    },
    onPressRemoveFromArrayForSimpleJSONO: function _onPressRemoveFromArrayForSimpleJSONO() {
      this.dataForSimpleJSONOModel.favorites.shift();
      MessageToast.show("The first item in the data object array was removed, it is reflected in the table");
    },
    onPressUpdateNameForSeparateJSONO: function _onPressUpdateNameForSeparateJSONO() {
      try {
        this.appViewModel.name = this.appViewModel.name === "Fibonacci" ? "Bonifatzy" : "Fibonacci";
        MessageToast.show(`It works. get name() method was called which and counter increased to ${this.appViewModel.getNameCounter}` + ` set name() method was called too (try to update 3 times)`);
      } catch (error) {
        MessageBox.error(error.message);
      }
    },
    onPressAddCityForSeparateJSONO: function _onPressAddCityForSeparateJSONO() {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      this.appViewModel.address.city = "Atlantis";
      MessageToast.show("A property was added to JSON data object (address.city), it is reflected in the UI field...");
    },
    onPressDisplayPersonalityForSeparateJSONO: function _onPressDisplayPersonalityForSeparateJSONO() {
      MessageToast.show(this.appViewModel.description.personality);
    },
    onPressUpdateArrayForSeparateJSONO: function _onPressUpdateArrayForSeparateJSONO() {
      this.appViewModel.favorites[0].label = this.appViewModel.favorites[0].label === "Strawberries" ? "French Fries" : "Strawberries";
      MessageToast.show("It works");
    },
    onPressAddToArrayForSeparateJSONO: function _onPressAddToArrayForSeparateJSONO() {
      this.appViewModel.favorites.push({
        label: "Pancakes",
        category: "Food"
      });
      MessageToast.show("'Pancakes' item was added to the data object array, it is reflected in the table");
    },
    onPressRemoveFromArrayForSeparateJSONO: function _onPressRemoveFromArrayForSeparateJSONO() {
      this.appViewModel.favorites.shift();
      MessageToast.show("The first item in the data object array was removed, it is reflected in the table");
    }
  });
  return AppController;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,